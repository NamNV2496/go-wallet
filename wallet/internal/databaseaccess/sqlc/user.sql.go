// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email,
  phone,
  role,
  is_email_verified
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, username, hashed_password, full_name, email, phone, role, is_email_verified, password_changed_at, created_at
`

type CreateUserParams struct {
	Username        pgtype.Text `json:"username"`
	HashedPassword  string      `json:"hashed_password"`
	FullName        string      `json:"full_name"`
	Email           string      `json:"email"`
	Phone           string      `json:"phone"`
	Role            string      `json:"role"`
	IsEmailVerified bool        `json:"is_email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Role,
		arg.IsEmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, hashed_password, full_name, email, phone, role, is_email_verified, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUsersByUsernameOrPhone = `-- name: GetUsersByUsernameOrPhone :many
SELECT accounts.id as account_id, users.username, users.full_name, users.phone
FROM users JOIN accounts ON users.id = accounts.user_id
WHERE users.username like $1
OR users.phone like $2
ORDER BY account_id
LIMIT $3
`

type GetUsersByUsernameOrPhoneParams struct {
	Username pgtype.Text `json:"username"`
	Phone    string      `json:"phone"`
	Limit    int32       `json:"limit"`
}

type GetUsersByUsernameOrPhoneRow struct {
	AccountID int64       `json:"account_id"`
	Username  pgtype.Text `json:"username"`
	FullName  string      `json:"full_name"`
	Phone     string      `json:"phone"`
}

func (q *Queries) GetUsersByUsernameOrPhone(ctx context.Context, arg GetUsersByUsernameOrPhoneParams) ([]GetUsersByUsernameOrPhoneRow, error) {
	rows, err := q.db.Query(ctx, getUsersByUsernameOrPhone, arg.Username, arg.Phone, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersByUsernameOrPhoneRow{}
	for rows.Next() {
		var i GetUsersByUsernameOrPhoneRow
		if err := rows.Scan(
			&i.AccountID,
			&i.Username,
			&i.FullName,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  hashed_password = COALESCE($1, hashed_password),
  password_changed_at = COALESCE($2, password_changed_at),
  full_name = COALESCE($3, full_name),
  email = COALESCE($4, email),
  phone = COALESCE($5, phone)
WHERE
  username = $6
RETURNING id, username, hashed_password, full_name, email, phone, role, is_email_verified, password_changed_at, created_at
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	FullName          pgtype.Text        `json:"full_name"`
	Email             pgtype.Text        `json:"email"`
	Phone             pgtype.Text        `json:"phone"`
	Username          pgtype.Text        `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FullName,
		arg.Email,
		arg.Phone,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const verifyEmail = `-- name: VerifyEmail :one
UPDATE users
SET
  is_email_verified = COALESCE($1, is_email_verified)
WHERE
  username = $2
RETURNING id, username, hashed_password, full_name, email, phone, role, is_email_verified, password_changed_at, created_at
`

type VerifyEmailParams struct {
	IsEmailVerified pgtype.Bool `json:"is_email_verified"`
	Username        pgtype.Text `json:"username"`
}

func (q *Queries) VerifyEmail(ctx context.Context, arg VerifyEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, verifyEmail, arg.IsEmailVerified, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
