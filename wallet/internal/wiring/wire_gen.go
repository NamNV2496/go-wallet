// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"github.com/namnv2496/go-wallet/api/restful"
	"github.com/namnv2496/go-wallet/config"
	"github.com/namnv2496/go-wallet/internal/app"
	"github.com/namnv2496/go-wallet/internal/databaseaccess"
	"github.com/namnv2496/go-wallet/internal/logic"
	"github.com/namnv2496/go-wallet/internal/mq/consumer"
	"github.com/namnv2496/go-wallet/internal/mq/producer"
	"github.com/namnv2496/go-wallet/internal/token"
	"github.com/namnv2496/go-wallet/internal/worker"
)

// Injectors from wire.go:

func Initialize(configConfig config.Config, redisOpt *worker.RedisConfigOpt) (*app.App, error) {
	maker, err := token.NewPasetoMaker(configConfig)
	if err != nil {
		return nil, err
	}
	database := databaseaccess.NewDatabase(configConfig)
	accountLogic, err := logic.NewAccountLogic(database)
	if err != nil {
		return nil, err
	}
	userLogic, err := logic.NewUserLogic(database)
	if err != nil {
		return nil, err
	}
	transferLogic, err := logic.NewtranserLogic(database)
	if err != nil {
		return nil, err
	}
	sessionLogic, err := logic.NewSessionLogic(database)
	if err != nil {
		return nil, err
	}
	producerProducer, err := producer.NewProducer(configConfig)
	if err != nil {
		return nil, err
	}
	consumerConsumer, err := consumer.NewConsumer(transferLogic, configConfig)
	if err != nil {
		return nil, err
	}
	redisTaskProcessor := worker.NewTaskProcessor(configConfig, redisOpt, database)
	server, err := restful.NewGinServer(configConfig, maker, accountLogic, userLogic, transferLogic, sessionLogic, producerProducer, consumerConsumer, redisTaskProcessor)
	if err != nil {
		return nil, err
	}
	appApp := app.NewApp(server)
	return appApp, nil
}
