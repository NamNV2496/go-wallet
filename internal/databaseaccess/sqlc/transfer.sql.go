// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfers (
  from_account_id,
  to_account_id,
  amount,
  currency,
  status,
  message
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, from_account_id, to_account_id, amount, currency, status, message, created_at
`

type CreateTransferParams struct {
	FromAccountID int64  `json:"from_account_id"`
	ToAccountID   int64  `json:"to_account_id"`
	Amount        int64  `json:"amount"`
	Currency      string `json:"currency"`
	Status        int32  `json:"status"`
	Message       string `json:"message"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, createTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.Message,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, amount, currency, status, message, created_at FROM transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_account_id, to_account_id, amount, currency, status, message, created_at FROM transfers
WHERE 
    from_account_id = $1
    AND
    ($2::bigint IS NULL OR $2::bigint = 0 OR to_account_id = $2::bigint)
ORDER BY id asc
LIMIT $3
OFFSET $4
`

type ListTransfersParams struct {
	FromAccountID int64 `json:"from_account_id"`
	Column2       int64 `json:"column_2"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.Query(ctx, listTransfers,
		arg.FromAccountID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.Message,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransferStatus = `-- name: UpdateTransferStatus :one
UPDATE transfers
SET
  status = COALESCE($1, status),
  message = COALESCE($2, message)
WHERE id = $3
RETURNING id, from_account_id, to_account_id, amount, currency, status, message, created_at
`

type UpdateTransferStatusParams struct {
	Status  int32  `json:"status"`
	Message string `json:"message"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateTransferStatus(ctx context.Context, arg UpdateTransferStatusParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, updateTransferStatus, arg.Status, arg.Message, arg.ID)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}
